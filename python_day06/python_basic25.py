"""
===============***===============
Auther : Lee
Date   : 2022-11-07 - 17:15
File   : python_basic25.py
===============***===============
"""
from copy import copy, deepcopy  # 引入复制功能

"""
python的深拷贝和浅拷贝,赋值的区别?
浅拷贝的使用方法:B=copy.copy(A)
使用浅拷贝,当容器中元素发生变化时,拷贝的对象不会发生变化
"""

# 1.赋值,没有的新的对象产生,而是i让:新的标识符还指向原来的对象
a = [1, 2, 3, 4, 5, 6]
b = a
print(b)
print(id(a))  # a的物理地址是: 2588397571016
print(id(b))  # b的物理地址是: 2588397571016

a.append(7)
print(a)  # [1, 2, 3, 4, 5, 6, 7]
print(b)  # [1, 2, 3, 4, 5, 6, 7]

# 深拷贝,复制出一个完全独立的新的对象,原容器与拷贝得到的对象互不影响
list1 = [1, 2, 3, [4, 5, 6]]
list2 = deepcopy(list1)  # list2是list1的深拷贝得到的对象

print(id(list1))  # list1的地址是:1904319811656
print(id(list2))  # list2的地址是: 1904319811720

# 修改原容器中的不可变类型
list1[0] = 999
print(list1)  # [999, 2, 3, [4, 5, 6]]
print(list2)  # [1, 2, 3, [4, 5, 6]]

# 浅拷贝,当原容器中可变对象有元素发生变化时,拷贝的对象也会发生变化
list1 = [1, 2, 3, [4, 5, 6]]
list2 = copy(list1)  # list2是List1的浅拷 贝得到的对象

print(id(list1))  # list1的地址是: 2141114114184
print(id(list2))  # list2的地址是: 2141114076936

# 修改原容器中的不可变类型
list1[0] = 999
print(list1)  # [999, 2, 3, [4, 5, 6]]
print(list2)  # [1, 2,3, [4, 5, 6]]
# 修改原容器中的可变类型
list1[-1][-1] = 666
print(list2)  # [1, 2,3, [4, 5, 666]]
print(list2)  # [1, 2,3, [4, 5, 666]]

# 总结:赋值没有新的东西产生,还是i让新的标识符指向原来的对象。只要是拷贝就会创建出新的对象,那深拷贝好理解一点就是拷贝出完全独立的新的
# 对象,拷贝得到的对象和原容器互不影响.浅拷贝就复杂一点, 对原容器的不可变类型的成员是拷贝了独立的对象,但对于原容器的可变类型成员并没有
# 真正的拷贝还指向原容器的可变类型成员.python默认的就是浅拷贝,这样可以减少系统资源的占用、 提高代码编译执行的效率。
